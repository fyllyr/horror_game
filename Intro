<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Abandoned Hospital Horror</title>
  <style>
    body { margin:0; overflow:hidden; background:black; color:white; font-family:sans-serif; }
    button { cursor:pointer; }
    #instructions, #tutorial, #mainMenu, #mainShop, #goodEnding, #badEnding {
      position:absolute; top:0; left:0; right:0; bottom:0;
      background:rgba(0,0,0,0.9); color:white;
      display:flex; justify-content:center; align-items:center;
      flex-direction:column; text-align:center; z-index:1000; padding:20px;
    }
    #shopMenu, #wifiMeter, #hud, #keyStatus, #dangerOverlay {
      position:absolute; z-index:500; font-family:sans-serif;
    }
    #shopMenu { top:10px; right:10px; background:rgba(0,0,0,0.8); color:white;
                padding:10px; display:none; }
    #wifiMeter { top:10px; right:10px; background:rgba(0,0,0,0.5);
                 padding:6px 12px; border-radius:8px; font-size:16px; }
    #hud { bottom:10px; left:10px; background:rgba(0,0,0,0.5);
           padding:5px 10px; font-size:18px; }
    #keyStatus { bottom:40px; left:10px; font-size:18px; }
    #dangerOverlay {
      top:0; left:0; right:0; bottom:0;
      background:rgba(255,0,0,0); pointer-events:none;
      transition:background 0.2s ease; z-index:400;
    }
  </style>
</head>
<body>
  <div id="tutorial">
    <h2>üïπÔ∏è How to Play</h2>
    <p><strong>W A S D</strong> ‚Äî Move | <strong>Mouse</strong> ‚Äî Look</p>
    <p><strong>F</strong> ‚Äî Toggle flashlight | <strong>E</strong> ‚Äî Interact</p>
    <p><strong>G</strong> ‚Äî Use gun | <strong>I</strong> ‚Äî Use invisibility box</p>
    <p><strong>M</strong> ‚Äî Open shop</p>
    <p>üéØ Find <strong>3 key cards</strong> in drawers to unlock exit</p>
    <p>üíÄ Avoid the monster or try again...</p>
    <button onclick="closeTutorial()" style="padding:10px 20px;font-size:18px;">Start Game</button>
  </div>

  <div id="mainMenu" style="display:none;">
    <div style="margin-bottom:20px;font-size:24px;">Welcome to the Abandoned Hospital</div>
    <div>
      <button onclick="startGame()" style="padding:10px 20px;font-size:20px;">Start Game</button>
      <button onclick="toggleMainShop()" style="padding:10px 20px;font-size:20px;margin-left:10px;">Shop</button>
    </div>
  </div>

  <div id="mainShop">
    <div style="font-size:22px;margin-bottom:20px;">üõí Inventory Shop</div>
    <div>Coins: <span id="mainShopCoins">0</span></div>
    <button onclick="buyInventorySlot()" style="margin-top:10px;padding:8px;">Buy Slot (5 coins)</button>
    <button onclick="closeMainShop()" style="margin-top:20px;padding:8px;">Back</button>
  </div>

  <div id="shopMenu">
    <div>Coins: <span id="coinCount">0</span></div>
    <button onclick="buy('gun')">Buy Gun (5)</button><br><br>
    <button onclick="buy('invis')">Buy Invis Box (8)</button><br><br>
    <button onclick="buy('hat')">Buy Hat (2)</button><br>
    <button onclick="toggleShop()" style="margin-top:10px;">Close</button>
  </div>

  <div id="goodEnding" style="display:none; font-size:36px;">
    üéâ You Escaped the Hospital!
  </div>

  <div id="badEnding" style="display:none; color:red; font-size:36px;">
    üíÄ You Died<br><br>
    <button onclick="location.reload()" style="font-size:20px;padding:10px;">Restart</button>
  </div>

  <div id="wifiMeter">üì∂ WiFi: <span id="wifiBars">4 bars</span></div>
  <div id="hud">‚ù§Ô∏è HP: <span id="hpBar">50</span>/100</div>
  <div id="keyStatus">üîë Keys: <span id="keyCount">0</span>/3</div>
  <div id="dangerOverlay"></div>

  <script type="module">
    import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.154.0/build/three.module.js';
    import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.154.0/examples/jsm/loaders/GLTFLoader.js';
    import { PointerLockControls } from 'https://cdn.jsdelivr.net/npm/three@0.154.0/examples/jsm/controls/PointerLockControls.js';

    let camera, scene, renderer, controls, flashlight;
    let moveF=false, moveB=false, moveL=false, moveR=false;
    let velocity=new THREE.Vector3(), prevTime=performance.now();
    let coins=0, inventory=[], inventoryLimit=3;
    let hasGun=false, invisUses=0, playerHP=50, keyCards=0, keyNeeded=3;
    const monsters=[], monsterMixers=[], pickups=[], interactive=[];

    const shopItems = {
      gun:{price:5}, invis:{price:8}, hat:{price:2}, costume1:{price:3,file:'clown_costume.glb'}
    };

    const loader = new GLTFLoader();
    const audioLoader = new THREE.AudioLoader();
    let footstepSound;

    init();
    animate();

    function closeTutorial(){
      document.getElementById('tutorial').style.display='none';
      document.getElementById('mainMenu').style.display='flex';
    }

    function startGame(){
      document.getElementById('mainMenu').style.display='none';
      controls.lock();
    }

    function toggleMainShop(){
      document.getElementById('mainMenu').style.display='none';
      document.getElementById('mainShop').style.display='flex';
      document.getElementById('mainShopCoins').textContent = coins;
    }

    function closeMainShop(){
      document.getElementById('mainShop').style.display='none';
      document.getElementById('mainMenu').style.display='flex';
    }

    function buyInventorySlot(){
      if(coins < 5){ alert("Not enough coins"); return;}
      if(inventoryLimit>=8){ alert("Max slots reached"); return;}
      coins-=5; inventoryLimit++; updateHUD(); alert("Inventory slots: "+inventoryLimit);
      document.getElementById('mainShopCoins').textContent=coins;
    }

    function buy(item){
      if(coins < shopItems[item].price){ alert("Not enough coins"); return;}
      coins-=shopItems[item].price;
      if(item==='gun') hasGun=true;
      if(item==='invis') invisUses=10;
      if(item==='hat'){
        const geo=new THREE.ConeGeometry(0.3,0.5,8);
        const mat=new THREE.MeshBasicMaterial({color:0xff00ff});
        const hat=new THREE.Mesh(geo,mat);
        hat.userData.pickable='hat';
        hat.position.set(0,-0.5,-1);
        camera.add(hat);
      }
      updateHUD();
    }

    function updateHUD(){
      document.getElementById('coinCount').textContent=coins;
      document.getElementById('hpBar').textContent=playerHP;
      document.getElementById('keyCount').textContent=keyCards;
    }

    function init(){
      scene=new THREE.Scene(); scene.fog=new THREE.Fog(0x000000,1,80);
      camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,200);
      renderer=new THREE.WebGLRenderer(); renderer.setSize(window.innerWidth,window.innerHeight);
      document.body.appendChild(renderer.domElement);

      controls=new PointerLockControls(camera,document.body);
      document.addEventListener('keydown',onKeyDown);
      document.addEventListener('keyup',onKeyUp);
      document.addEventListener('keypress',onKeyPress);

      scene.add(controls.getObject());
      const floor=new THREE.Mesh(new THREE.PlaneGeometry(100,100),
                  new THREE.MeshPhongMaterial({color:0x111111}));
      floor.rotation.x=-Math.PI/2; scene.add(floor);

      const wallMat=new THREE.MeshPhongMaterial({color:0x222222});
      for(let i=-1;i<=1;i++){
        const wall=new THREE.Mesh(new THREE.BoxGeometry(1,10,100),wallMat);
        wall.position.set(i*49,5,0); scene.add(wall);
      }
      scene.add(new THREE.HemisphereLight(0x888888,0x000000,0.5));

      flashlight=new THREE.SpotLight(0xffffff,3,40,Math.PI/8,0.5);
      flashlight.position.set(0,1.6,0); flashlight.visible=false;
      scene.add(flashlight); scene.add(flashlight.target);

      const listener=new THREE.AudioListener(); camera.add(listener);
      audioLoader.load('creepy_violin.mp3', buffer => {
        const amb=new THREE.Audio(listener);
        amb.setBuffer(buffer); amb.setLoop(true); amb.setVolume(0.4); amb.play();
      });

      footstepSound=new THREE.Audio(listener);
      audioLoader.load('footsteps_loop.mp3',buffer=>{
        footstepSound.setBuffer(buffer); footstepSound.setLoop(true); footstepSound.setVolume(0.6);
      });

      loadObjects();

      loader.load('monster.glb', gltf=>{
        const m=gltf.scene; m.scale.set(2,2,2); m.position.set(10,0,-40); scene.add(m);
        monsters.push(m);
        const mixer=new THREE.AnimationMixer(m);
        const walk=gltf.animations.find(c=>/walk/i.test(c.name) || c);
        mixer.clipAction(walk).play(); monsterMixers.push(mixer);
      });

      loader.load('wendigo_dead.glb', gltf=>{
        const c=gltf.scene; c.scale.set(2,2,2);
        c.rotation.x=-Math.PI/2; c.position.set(-5,0,-20); scene.add(c);
      });

      window.addEventListener('resize',()=> {
        camera.aspect=window.innerWidth/window.innerHeight;
        camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth,window.innerHeight);
      });
    }

    const puddleZones=[ new THREE.Vector3(0,0,-10), new THREE.Vector3(-5,0,-25),
                        new THREE.Vector3(3,0,-40), new THREE.Vector3(0,0,-55) ];
    let lastSplashTime=0;

    function loadObjects(){
      loader.load('medical_cart_with_drawers.glb', gltf=>{
        const drawer=gltf.scene; drawer.scale.set(2,2,2); drawer.position.set(2,0,-15);
        scene.add(drawer); interactive.push(drawer);
      });
    }

    function spawnCoin(pos){ const geo=new THREE.SphereGeometry(0.1,8,8);
      const mat=new THREE.MeshBasicMaterial({color:0xffff00});
      const coin=new THREE.Mesh(geo,mat); coin.position.copy(pos);
      coin.userData.pickable='coin'; scene.add(coin); pickups.push(coin);
    }

    function spawnKey(pos){ const geo=new THREE.BoxGeometry(0.3,0.02,0.2);
      const mat=new THREE.MeshBasicMaterial({color:0x00ffff});
      const key=new THREE.Mesh(geo,mat); key.position.copy(pos);
      key.userData.pickable='keycard'; scene.add(key); pickups.push(key);
    }

    function spawnMedkit(pos){ const geo=new THREE.BoxGeometry(0.3,0.2,0.3);
      const mat=new THREE.MeshBasicMaterial({color:0xff0000});
      const med=new THREE.Mesh(geo,mat); med.position.copy(pos);
      med.userData.pickable='medkit'; scene.add(med); pickups.push(med);
    }

    function onKeyPress(e){
      if(e.key==='f') flashlight.visible=!flashlight.visible;
      if(e.key==='m') document.getElementById('shopMenu').style.display = 
        document.getElementById('shopMenu').style.display === 'none' ? 'block' : 'none';
      if(e.key==='g' && hasGun) shootMonster();
      if(e.key==='i' && invisUses>0){ invisUses--; hideFromMonster(); }
      if(e.key==='e'){
        const ray=new THREE.Raycaster(camera.position, controls.getDirection(new THREE.Vector3()));
        const ints=ray.intersectObjects(interactive,true);
        if(ints.length>0 && ints[0].distance<3){
          const obj=ints[0].object.parent||ints[0].object;
          if(!obj.userData.opened){ obj.userData.opened=true;
            if(Math.random()<0.3 && keyCards<keyNeeded) spawnKey(obj.position.clone().add(new THREE.Vector3(0,0.5,0)));
            else if(Math.random()<0.3) spawnMedkit(obj.position.clone().add(new THREE.Vector3(0,0.5,0)));
            else spawnCoin(obj.position.clone().add(new THREE.Vector3(0,0.5,0)));
          }
        }
      }
    }

    function onKeyDown(e){ ['W','A','S','D'].includes(e.code.substring(3)) &&
       (moveF = e.code==='KeyW', moveB = e.code==='KeyS', moveL = e.code==='KeyA', moveR = e.code==='KeyD'); }
    function onKeyUp(e){ if(['KeyW','KeyA','KeyS','KeyD'].includes(e.code)) 
        (moveF = moveB = moveL = moveR = false); }

    function shootMonster(){
      monsters.forEach(mon=>{
        const ray=new THREE.Raycaster(camera.position, controls.getDirection(new THREE.Vector3()));
        const ints=ray.intersectObject(mon,true);
        if(ints.length && ints[0].distance<10){
          scene.remove(mon); alert('Monster destroyed!');
        }
      });
    }

    function hideFromMonster(){
      monsters.forEach(mon=>{
        mon.userData.hidden=true;
        setTimeout(()=>mon.userData.hidden=false,5000);
      });
    }

    function triggerGoodEnding(){
      document.exitPointerLock();
      document.getElementById('goodEnding').style.display='flex';
    }

    function animate(){
      requestAnimationFrame(animate);
      const time=performance.now(), delta=(time-prevTime)/1000;
      velocity.x -= velocity.x * 15 * delta;
      velocity.z -= velocity.z * 15 * delta;
      if(moveF) velocity.z -= 40 * delta;
      if(moveB) velocity.z += 40 * delta;
      if(moveL) velocity.x -= 40 * delta;
      if(moveR) velocity.x += 40 * delta;
      controls.moveRight(-velocity.x * delta);
      controls.moveForward(-velocity.z * delta);
      flashlight.position.copy(camera.position);
      flashlight.target.position.copy(camera.position).add(controls.getDirection(new THREE.Vector3()).multiplyScalar(10));

      const isMoving = moveF||moveB||moveL||moveR;
      if(isMoving && !footstepSound.isPlaying) footstepSound.play();
      else if(!isMoving && footstepSound.isPlaying) footstepSound.stop();

      monsterMixers.forEach(m=>m.update(delta));
      let danger=false;

      monsters.forEach(mon => {
        const dist=camera.position.distanceTo(mon.position);
        if(!mon.userData.hidden && dist<30){
          const dir=camera.position.clone().sub(mon.position).normalize();
          mon.position.add(dir.multiplyScalar(5*delta));
        }
        if(dist<2 && !mon.userData.caught){
          mon.userData.caught=true;
          document.exitPointerLock();
          document.getElementById('badEnding').style.display='flex';
        }
        if(dist<10 && !mon.userData.hidden) danger=true;
      });

      document.getElementById('dangerOverlay').style.background= danger ? "rgba(255,0,0,0.25)" : "rgba(255,0,0,0)";
      updateWiFi();
      updateHUD();

      pickups.forEach(o=> {
        const d=camera.position.distanceTo(o.position);
        if(d<1){
          if(o.userData.pickable==='coin') coins++;
          if(o.userData.pickable==='keycard') keyCards++;
          if(o.userData.pickable==='medkit') playerHP=Math.min(100,playerHP+25);
          scene.remove(o); o.userData.pickable=null;
        }
      });

      puddleZones.forEach(pos => {
        if(camera.position.distanceTo(pos)<1.5 && time-lastSplashTime>1000){
          audioLoader.load('puddle_splash.mp3', buffer => {
            const s=new THREE.Audio(camera.children[0]);
            s.setBuffer(buffer); s.setVolume(0.3); s.play();
          });
          lastSplashTime=time;
        }
      });

      prevTime=time;
      renderer.render(scene,camera);
    }

    function updateWiFi(){
      let bars=4;
      monsters.forEach(m=> {
        const d=camera.position.distanceTo(m.position);
        bars = d<10?1: d<20?2: d<30?3:4;
      });
      document.getElementById('wifiBars').textContent = bars + ' bar' + (bars>1?'s':'');
    }
  </script>
</body>
</html>
